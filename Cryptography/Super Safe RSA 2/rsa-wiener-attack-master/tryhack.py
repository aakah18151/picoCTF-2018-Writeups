import ContinuedFractions, Arithmetic  
import time  
import sys  
import base64  
import binascii  
import gmpy2  
import sympy  
import math  
import fractions  
import struct  
sys.setrecursionlimit(100000)  
# modulus from the RSA public key  
n=77531969503748326589677418948315140870584015245386763633241518845356850979564402923266696704186567270006361208862086254527576010412135230279553684940635956656649728134893874567619948675304052482720430367748612708917105846534082863042823913166120865362252479206576942147071396319459112580853771742537940112457  
# exponent from the RSA public key  
e=56172436577459725698934391359139104915041430213184221292301658571726414059411889155782982024019814564512291421932489731563519296372873415080546379424619308859152360214209740169135159761234894923144971372974038021945201954600238994209605035703317119192844975463915465725406543097929017637859019950590916533609


def hack_RSA(e,n):  
 print("Performing Wiener's attack. Don't Laugh..."  )
 time.sleep(1)  
 frac = ContinuedFractions.rational_to_contfrac(e, n)  
 convergents = ContinuedFractions.convergents_from_contfrac(frac)  
 for (k,d) in convergents:  
   #check if d is actually the key  
   if k!=0 and (e*d-1)%k == 0:  
     phi = (e*d-1)//k  
     s = n - phi + 1  
     # check if the equation x^2 - s*x + n = 0  
     # has integer roots  
     discr = s*s - 4*n  
     if(discr>=0):  
       t = Arithmetic.is_perfect_square(discr)  
       if t!=-1 and (s+t)%2==0:  
         return d  
hacked_d = hack_RSA(e, n)  
print("d=" + str(hacked_d))

# c: 64522795778508539605902195428183483912849905364798559864831614529163073310677812055581890349045231219492590171014886345268056617140499875120860505468654816077045544669798682818506846375480762059839600939146611741992033080630365752605380036018374868491510275160810553889453056201979741852199607120905407698918
# n: 75829730776263185880535233085105962740248082263493191444403734926822207707079445018823551565646169918215592666402299912143157240492667316308063638156755882534713134099702186319195103892792853792349165010256680418402551041047282029303241267041698159699471815938612064796163262408194737810208334972897618035143
# e: 26252357623672664669476233325723929820002269534406472995133685425861255026411424508782635175136883733988336085081736770169768140585289664459979185591934843099031348722998046286796961733767819589249120540260377134156002158609103305944050853998005296395418721081154663980420853855262459441049178741507693459353
